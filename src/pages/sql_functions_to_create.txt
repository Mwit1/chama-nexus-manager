
-- Create the following functions in your database to support the operations:

-- 1. Create group function
CREATE OR REPLACE FUNCTION public.create_group(
  p_name TEXT,
  p_description TEXT,
  p_created_by UUID
) 
RETURNS UUID
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  v_id UUID;
BEGIN
  INSERT INTO public.groups(name, description, created_by)
  VALUES (p_name, p_description, p_created_by)
  RETURNING id INTO v_id;
  
  RETURN v_id;
END;
$$;

-- 2. Update group function
CREATE OR REPLACE FUNCTION public.update_group(
  p_id UUID,
  p_name TEXT,
  p_description TEXT
)
RETURNS VOID
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  UPDATE public.groups
  SET 
    name = p_name,
    description = p_description,
    updated_at = now()
  WHERE id = p_id AND created_by = auth.uid();
END;
$$;

-- 3. Delete group function
CREATE OR REPLACE FUNCTION public.delete_group(
  p_id UUID
)
RETURNS VOID
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  DELETE FROM public.groups
  WHERE id = p_id AND created_by = auth.uid();
END;
$$;

-- 4. Get all groups function
CREATE OR REPLACE FUNCTION public.get_groups()
RETURNS SETOF public.groups
LANGUAGE sql
SECURITY DEFINER
AS $$
  SELECT * FROM public.groups
  ORDER BY created_at DESC;
$$;

-- 5. Get group by ID function
CREATE OR REPLACE FUNCTION public.get_group_by_id(
  p_id UUID
)
RETURNS SETOF public.groups
LANGUAGE sql
SECURITY DEFINER
AS $$
  SELECT * FROM public.groups
  WHERE id = p_id;
$$;

-- 6. Consolidated has_role function to prevent ambiguity
CREATE OR REPLACE FUNCTION public.has_role(
  p_user_id UUID,
  p_role TEXT
)
RETURNS BOOLEAN
LANGUAGE sql
STABLE SECURITY DEFINER
AS $$
  SELECT EXISTS (
    SELECT 1
    FROM public.user_roles
    WHERE user_id = p_user_id
      AND role = p_role
  );
$$;

-- Note to implementer: 
-- These functions will help work around the TypeScript type issues by abstracting
-- direct database table access. Please create these functions in your database
-- before using the updated TypeScript components.
